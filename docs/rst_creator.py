#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This file is part of AudioLazy, the signal processing Python package.
# Copyright (C) 2012 Danilo de Jesus da Silva Bellini
#
# AudioLazy is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Created on Fri Feb 08 2013
# danilo [dot] bellini [at] gmail [dot] com
"""
AudioLazy documentation RST file creator

You should call make_all_docs afterwards!

Note
----
Calling this OVERWRITES the RST files in the directory it's in, and don't
ask for confirmation!

"""

import os
import audiolazy
import re

# This file should be at the conf.py directory!
from conf import readme_file_contents, splitter, master_doc

def find_full_name(prefix, suffix="rst"):
  return os.path.join(os.path.split(__file__)[0],
                       os.path.extsep.join([prefix, suffix]))

def save_to_rst(prefix, data):
  with open(find_full_name(prefix), "w") as rst_file:
    rst_file.write(full_gpl_for_rst)
    rst_file.write(data)

# Splits README.rst data
readme_data = splitter(readme_file_contents.splitlines())
rfc_copyright = readme_data.popitem()[1] # Last block
gen_blocks = readme_data.iteritems()

# First block (before title)
gpl_to_add = "  File auto-generated by the rst_creator.py script."
full_gpl_for_rst = gen_blocks.next()[1]
full_gpl_for_rst = "\n".join(full_gpl_for_rst[:-1] + [gpl_to_add] +
                             full_gpl_for_rst[-1:] + ["\n\n"])
gpl_for_rst = "\n".join(full_gpl_for_rst.strip().strip(".").splitlines()[:-2])

rfc_name, rfc_description = gen_blocks.next() # Second block
rfc_name = " ".join([rfc_name, "|version|"]) # Puts version in title ...
rfc_name = [rfc_name, "=" * len(rfc_name)] # ... and the syntax of a title

# Creates a RST for each block besides the first and the last ones (these
# were both already removed)
readme_names = [] # Keep the file names
for name, data in gen_blocks:
  fname = "".join(re.findall("[\w ]", name)).replace(" ", "_").lower()

  # Image location should be corrected before
  img_string = ".. image:: "
  for idx, el in enumerate(data):
    if el.startswith(img_string):
      data[idx]  = el.replace(img_string, img_string + "../")

  save_to_rst(fname, "\n".join([name, "=" * len(name)] + data).strip())
  readme_names.append(fname)

# Creates the first block (master document)
main_toc = """
.. toctree::
  :maxdepth: 2

  intro
  modules
"""
first_block = rfc_name + [""] + rfc_description + [main_toc]

# Second block in the master document
indices_block = """
.. only:: html

  Indices and tables
  ------------------

  * :ref:`genindex`
  * :ref:`modindex`
  * :ref:`search`
"""

# Creates the master document (with the TOC)
index_data = "\n".join(first_block + [indices_block])
save_to_rst(master_doc, index_data.strip())

# Creates the intro.rst
intro_block = """
Introduction
============

This is the main AudioLazy documentation, whose contents are mainly from the
repository documentation and source code docstrings, tied together with
`Sphinx <http://sphinx.pocoo.org>`_. The sections below can introduce you to
the AudioLazy Python DSP package.

.. toctree::
  :maxdepth: 4
{0}
  license
""".format(("\n" + 2 * " ").join([""] + readme_names))
save_to_rst("intro", intro_block.strip())

# Insert license file link and creates the license.rst
license_file_name = "COPYING.txt"
license_full_file_name = "../" + license_file_name
linked_file_name = ":download:`{0} <{1}>`".format(license_file_name,
                                                  license_full_file_name)
license_block = """
License and auto-generated reST files
=====================================

All project files, including source and documentation, are free software,
under GPLv3. This is free in the sense that the source code have to be always
available to you if you ask for it, but stated in a precise way that is far
from the technical language from engineering, maths and computer science,
and would be beyond the needs of this document. You should find the following
information in all Python (*\*.py*) source code files and also in all
reStructuredText (*\*.rst*) files::

  {0}

This is so also for auto-generated reStructuredText documentation files.
However, besides most reStructuredText files being generated by a script,
their contents aren't auto-generated. These were created inside the Python
files, organized in a way that would make the same written documentation be
instantiated as (thanks to `Sphinx <sphinx.pocoo.org>`_):

- Python docstrings
- `Spyder <https://code.google.com/p/spyderlib/>`_ (Python IDE made for
  scientific purposes), it reads the docstrings for HTML rendering. The
  AudioLazy docstrings have a reStructuredText syntax following its
  conventions, replaced to other ones by Sphinx.
- HTML
- PDF (LaTeX)
- ePUB
- Manual pages (man)
- Texinfo
- Pure text file

License is the same in all files that generates those documentations.
Some reStructuredText files, like the README.rst that generated this whole
chapter, were created manually. They're also free software as described in
GPLv3. Finally, the main project repository includes the message:

.. parsed-literal::

  {1}

This should be applied to all files that belongs to the AudioLazy project.
Although all the project was up to now created by a sole person, this sole
person had never wanted to keep such status for so long. If you found a bug
or otherwise have an issue or a patch to send, show the issue or the pull
request at the
`main AudioLazy repository <https://github.com/danilobellini/audiolazy>`_,
so that the bug would be fixed, or the new resource become available, not
only for a few people but for everyone.
""".format(gpl_for_rst, "\n  ".join(rfc_copyright)
                              .replace(license_file_name,linked_file_name)
                              .replace(" - ", "\n  ")
          )

save_to_rst("license", license_block.strip())

# Creates the modules.rst
modules_block = """
Modules Documentation
=====================

Below is the table of contents, with processed data from docstrings. They were
made and processed in a way that would be helpful as a stand-alone
documentation, but if it's your first time with this package, you should see
at least the :doc:`getting_started` before these, since the
full module documentation isn't written for beginners.

.. toctree::
  :maxdepth: 4
  :glob:

  audiolazy
  lazy_*
"""
save_to_rst("modules", modules_block.strip())

# Creates the RST file for each module
lzmodules = [name for name in dir(audiolazy) if name.startswith("lazy_")]
for lzmodule in ["__init__"] + lzmodules:
  module_type = "Module" if lzmodule != "__init__" else "Package"
  fprefix = lzmodule if lzmodule != "__init__" else "audiolazy"
  first_line = ":mod:`{0}` {1}".format(fprefix, module_type)
  data = [
    first_line,
    "=" * len(first_line),
    ".. automodule:: audiolazy.{0}".format(lzmodule),
    "   :members:",
    "   :undoc-members:",
    "   :show-inheritance:",
  ]

  # See if there's any StrategyDict in the module
  if lzmodule != "__init__":
    module_data = getattr(audiolazy, lzmodule)
    for memb in module_data.__all__:
      memb_data = getattr(module_data, memb)
      if isinstance(memb_data, audiolazy.StrategyDict):
        sline = ":obj:`{0}.{1}` StrategyDict".format(lzmodule, memb)
        data += [
          "", sline,
          "-" * len(sline),
          ".. automodule:: audiolazy.{0}.{1}".format(lzmodule, memb),
          "   :members:",
          "   :undoc-members:",
        ]

  save_to_rst(fprefix, "\n".join(data).strip())

